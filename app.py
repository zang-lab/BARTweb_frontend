# -*- coding: utf-8 -*-
import os
import yaml
from flask import (Flask, flash, request, redirect, url_for, render_template, send_from_directory, session)
from werkzeug.utils import secure_filename

import parseIO
from utils import model_logger as logger 
import utils
# test commit

PROJECT_DIR = os.path.dirname(os.path.realpath(__file__))

# related to flask app
app = Flask(__name__)
app.secret_key = os.urandom(24)


# === index page
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        print(request.form)
        # submit job button
        if 'submit_button' in request.form:
            # use user email or job name to generate unique job path
            useremail = request.form['useremail']
            jobname = request.form['jobname']

            # if the userkey is generated by the jquery
            if "userkey" in request.form:
                user_key = request.form['userkey']
            else:
                user_key = parseIO.generate_user_key(useremail, jobname)

            # docker user path
            user_path = parseIO.init_project_path(user_key)

            # init user data
            user_data = {}
            user_data['user_email'] = useremail
            user_data['user_job'] = jobname
            user_data['user_key'] = user_key
            user_data['user_path'] = user_path
            user_data['dataType'] = request.form['dataType']
            user_data['assembly'] = request.form['species']
            # if user_data['dataType'] != 'HiC':
            #     user_data['files'] = ''
            # else:
            #     user_data['control_index_file'] = ''
            #     user_data['control_matrix_file'] = ''
            #     user_data['treatment_index_file'] = ''
            #     user_data['treatment_matrix_file'] = ''

            #Already cheked in HTML
            # if user_data['dataType'] == "ChIP-seq":
            #     allowed_extensions = set(['bam', 'bed'])
            # if user_data['dataType'] == "Geneset":
            #     allowed_extensions = set(['txt'])

            # get pasted genes and save to upload/genelist.txt
            if request.form.get('uploadList', None):
                gene_list = request.form['uploadList']
                gene_list_file = 'Geneset.txt'
                gene_list_file_path = os.path.join(user_path, 'upload/' + gene_list_file)
                with open(gene_list_file_path, 'w') as fopen:
                    for gene in gene_list:
                        fopen.write(gene)
                user_data['files'] = gene_list_file
                user_data['original_input'] = 'Pasted gene list'

            # validate upload file and write fine name and file path into config in the case of profile input
            if request.form['dataType'] == 'ChIP-seq':	
                # process what user has uploaded	
                if 'uploadFilesProfile' not in request.files:	
                    flash('Please choose a file')	
                    return redirect(request.url)	
                file = request.files['uploadFilesProfile']
                # if user does not select file, browser also submits an empty part without filename	
                if file.filename == '':	
                    flash('One of the files does not have a legal file name.')	
                    return redirect(request.url)
                if file: #and allowed_file(file.filename, allowed_extensions):	
                    filename = secure_filename(file.filename)	
                    upload_path = os.path.join(user_path, 'upload')	
                    ext = filename.split('.')[-1]
                    filename = "ChIP_seq."+ext
                    filename_abs_path = os.path.join(upload_path, filename)	
                    file.save(filename_abs_path)	
                    user_data['files'] = filename # only save file name, since the uploaded path is always the same
                    user_data['original_input'] = secure_filename(file.filename)
            
            # validate upload file and write fine name and file path into config in the case of scored bed
            if request.form['dataType'] == 'regions':
                if request.form['region_type'] == 'diffBedUnscored':
                    if 'uploadFilesRegions' not in request.files or 'uploadFilesRegions_treat' not in request.files:   
                        flash('Please choose all files')   
                        return redirect(request.url)
                    file_control = request.files['uploadFilesRegions']
                    file_treat = request.files['uploadFilesRegions_treat']
                    if file_control.filename == '' or file_treat.filename == '': 
                        flash('One of the files does not have a legal file name.')  
                        return redirect(request.url)
                    upload_path = os.path.join(user_path, 'upload') 
                    filename_control = "Region_control.bed"
                    filename_treat = "Region_treat.bed"
                    filename_abs_path_control = os.path.join(upload_path, filename_control) 
                    filename_abs_path_treat = os.path.join(upload_path, filename_treat) 
                    file_control.save(filename_abs_path_control)
                    file_treat.save(filename_abs_path_treat)
                    user_data['files_control'] = filename_control
                    user_data['files_treat'] = filename_treat
                    user_data['control_original_input'] = secure_filename(file_control.filename)
                    user_data['treat_original_input'] = secure_filename(file_treat.filename)
                    user_data['region_type'] = request.form['region_type']

                else:
                    if 'uploadFilesRegions' not in request.files:   
                        flash('Please choose a file')   
                        return redirect(request.url)
                    file = request.files['uploadFilesRegions']
                    if file.filename == '': 
                        flash('One of the files does not have a legal file name.')  
                        return redirect(request.url)
                    if file:
                        filename = secure_filename(file.filename)   
                        upload_path = os.path.join(user_path, 'upload') 
                        filename = "Region.bed"
                        filename_abs_path = os.path.join(upload_path, filename) 
                        file.save(filename_abs_path)    
                        user_data['files'] = filename # only save file name, since the uploaded path is always the same
                        user_data['original_input'] = secure_filename(file.filename)
                        #user_data['region_type'] = request.form['region_type']

            # validate upload file and write fine name and file path into config in the case of genelist input
            if request.form['dataType'] == 'Geneset' and request.form['geneType'] == 'geneFile': 
                # process what user has uploaded    
                if 'uploadFilesGenelist' not in request.files:  
                    flash('Please choose a file')   
                    return redirect(request.url)    
                file = request.files['uploadFilesGenelist']
                # if user does not select file, browser also submits an empty part without filename 
                if file.filename == '': 
                    flash('One of the files does not have a legal file name.')  
                    return redirect(request.url)
                if file: #and allowed_file(file.filename, allowed_extensions):    
                    filename = secure_filename(file.filename)   
                    upload_path = os.path.join(user_path, 'upload') 
                    filename = "Geneset.txt"
                    filename_abs_path = os.path.join(upload_path, filename)   
                    file.save(filename_abs_path)    
                    user_data['files'] = filename # only save file name, since the uploaded path is always the same
                    user_data['original_input'] = secure_filename(file.filename)
            
            #if the input is Differential HiC files
            if request.form['dataType'] == 'HiC':
                if 'uploadFilesIndex1' not in request.files or 'uploadFilesIndex2' not in request.files or 'uploadFilesMatrix1' not in request.files or 'uploadFilesMatrix2' not in request.files:   
                    flash('Please upload all HiC index and matrix files')   
                    return redirect(request.url)
                index1 = request.files['uploadFilesIndex1']
                matrix1 = request.files['uploadFilesMatrix1']
                index2 = request.files['uploadFilesIndex2']
                matrix2 = request.files['uploadFilesMatrix2']
                index1_name = 'index1.bed'
                matrix1_name = 'matrix1.bed'
                index2_name = 'index2.bed'
                matrix2_name = 'matrix2.bed'
                upload_path = os.path.join(user_path, 'upload')
                index1.save(os.path.join(upload_path, index1_name))
                matrix1.save(os.path.join(upload_path, matrix1_name))
                index2.save(os.path.join(upload_path, index2_name))
                matrix2.save(os.path.join(upload_path, matrix2_name))
                user_data['control_index_file'] = index1_name
                user_data['control_matrix_file'] = matrix1_name
                user_data['treatment_index_file'] = index2_name
                user_data['treatment_matrix_file'] = matrix2_name
                user_data['control_index_input'] = secure_filename(index1.filename)
                user_data['control_matrix_input'] = secure_filename(matrix1.filename)
                user_data['treatment_index_input'] = secure_filename(index2.filename)
                user_data['treatment_matrix_input'] = secure_filename(matrix2.filename)

            parseIO.init_user_config(user_path, user_data)
            parseIO.prepare_bart(user_data)
            parseIO.site_stats()

            if useremail != "":  
                logger.info("Init project: send e-mail to {} for {}".format(useremail, user_key))    
                send_flag, send_msg = utils.send_email(useremail, user_key, 'Submit')    
                if send_flag:   
                    logger.info("Init project: " + send_msg)    
                else:   
                    logger.error("Init project:" + send_msg)
            else:
                logger.info("Init project: user does not have an e-mail")

            return redirect(url_for('get_result', user_key=user_key))

        # get result button
        if 'result_button' in request.form:
            user_key = request.form['result_button']
            # when key is null, refresh the website
            if user_key == "":
                return render_template('index.html')

            logger.info("Retrieve result: for " + user_key)

            if parseIO.is_user_key_exists(user_key):
                logger.info("Retrieve result: user exists.")

                return redirect(url_for('get_result', user_key=user_key))
            else:
                logger.error("Retrieve result: did not find the result.")

                err_msg = "Job does not exist, make sure you enter the right key."
                return redirect(url_for('error_page', msg=err_msg))

        # navbar result button
        if 'navbar_button' in request.form:
            logger.info("Retrieve result...")
            user_key = request.form['navbar_button']  

            if parseIO.is_user_key_exists(user_key):
                logger.info("Retrieve result: user exists.")
                return redirect(url_for('get_result', user_key=user_key))
            else:
                logger.error("Retrieve result: did not find the result.")
                err_msg = "Job does not exist, make sure you enter the right key."
                return redirect(url_for('error_page', msg=err_msg))
    return render_template('index.html')

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        # navbar result button
        if 'navbar_button' in request.form:
            logger.info("Retrieve result...")
            user_key = request.form['navbar_button']  

            if parseIO.is_user_key_exists(user_key):
                logger.info("Retrieve result: user exists.")
                return redirect(url_for('get_result', user_key=user_key))
            else:
                logger.error("Retrieve result: can not find the result for {}.".format(user_key))
                err_msg = "Job does not exist, make sure you enter the right key."
                return redirect(url_for('error_page', msg=err_msg))

    return render_template('contact.html')

@app.route('/help', methods=['GET', 'POST'])
def help():
    if request.method == 'POST':
        # navbar result button
        if 'navbar_button' in request.form:
            logger.info("Retrieve result...")
            user_key = request.form['navbar_button']  

            if parseIO.is_user_key_exists(user_key):
                logger.info("Retrieve result: user exists.")
                return redirect(url_for('get_result', user_key=user_key))
            else:
                logger.error("Retrieve result: did not find the result.")
                err_msg = "Job does not exist, make sure you enter the right key."
                return redirect(url_for('error_page', msg=err_msg))
    return render_template('help.html')


#############################################

@app.route('/result', methods=['GET', 'POST'])
def get_result():
    if request.method == 'POST':
        # navbar result button
        if 'navbar_button' in request.form:
            logger.info("Retrieve result...")
            user_key = request.form['navbar_button']  

            if parseIO.is_user_key_exists(user_key):
                logger.info("Retrieve result: user exists.")
                return redirect(url_for('get_result', user_key=user_key))
            else:
                logger.error("Retrieve result: did not find the result.")
                err_msg = "Job does not exist, make sure you enter the right key."
                return redirect(url_for('error_page', msg=err_msg))

    else:
        user_key = request.args['user_key']
        user_data = parseIO.get_user_data(user_key)

        logger.info('Get result: for ' + user_key)
        logger.info(user_data)

        results = parseIO.generate_results(user_data)
        results['sample'] = False

        ## @marvinquite 02/25/2024, debug purpose
        # logger.info(results)
        ## Results can be accurately retrieved 04/16/2024 
        ## end 
        return render_template('result_demonstration.html', results=results, key=request.args['user_key'])

@app.route('/error', methods=['GET', 'POST'])
def error_page():
    err_msg = request.args['msg']
    return render_template('error.html', msg=err_msg)

@app.route('/plot/<userkey_tfname>')
def bart_plot_result(userkey_tfname):
    user_key, tf_name = userkey_tfname.split('___')
    # ========= using d3.js below=============
    # use user_key to retrieve plot related results
    user_path = os.path.join(PROJECT_DIR, 'usercase/' + user_key)
    bart_output_dir = os.path.join(user_path, 'download/')

    plot_results = parseIO.generate_plot_results(bart_output_dir, tf_name)
    return render_template('plot_result.html', plotResults=plot_results)

@app.route('/log/<userkey_filename>')
def download_log_file(userkey_filename):
    user_key, filename = userkey_filename.split('___')
    user_path = os.path.join(PROJECT_DIR, 'usercase/' + user_key)
    log_path = os.path.join(user_path, 'log')
    return send_from_directory(log_path, filename)

@app.route('/download/<userkey_filename>')
def download_result_file(userkey_filename):
    user_key, filename = userkey_filename.split('___')
    user_path = os.path.join(PROJECT_DIR, 'usercase/' + user_key)
    download_path = os.path.join(user_path, 'download')
    return send_from_directory(download_path, filename)

# ===== for genelist/ChIPdata sample =====

# download sample data
@app.route('/sample/<sample_type>')
def download_sample_file(sample_type):
    sample_path = ""
    sample_name = ""
    if sample_type == 'genelist':
        sample_name = "genelist.txt"
        sample_path = os.path.join(PROJECT_DIR, 'sample/genelist/upload')
    elif sample_type == 'ChIPdata':
        sample_name = "ChIPseq.bam"
        sample_path = os.path.join(PROJECT_DIR, 'sample/ChIPdata/upload')
    elif sample_type == 'ChIPpeaks':
        sample_name = "ChIPpeaks.bed"
        sample_path = os.path.join(PROJECT_DIR, 'sample/Region')

    return send_from_directory(sample_path, sample_name)

# sample result
@app.route('/sample_result/<sample_type>')
def sample_result(sample_type):
    config_file = os.path.join(PROJECT_DIR, 'sample/' + sample_type + '/user.config')
    if not os.path.exists(config_file):
        return None

    user_data = {}
    with open(config_file, 'r') as fopen:
        user_data = yaml.load(fopen, Loader=yaml.FullLoader)

    if user_data:
        results = parseIO.generate_results(user_data)
        
        if 'bart_result_files' in results:
            bart_result_list = []
            for bart_res_file in results['bart_result_files']:
                filename, file_url = bart_res_file
                bart_result_list.append((filename, file_url.replace('download', 'sample_download')))
            results['bart_result_files'] = bart_result_list

    results['sample'] = True
    results['sample_type'] = sample_type
    return render_template('result_demonstration.html', results=results)

# show sample plot result
@app.route('/sample_plot/<sample_type>/<tf_name>')
def bart_sample_plot_result(sample_type, tf_name):
    user_path = os.path.join(PROJECT_DIR, 'sample/' + sample_type)
    bart_output_dir = os.path.join(user_path, 'download')

    plot_results = parseIO.generate_plot_results(bart_output_dir, tf_name)
    return render_template('plot_result.html', plotResults=plot_results)

# download sample result files
@app.route('/sample_download/<userkey_filename>')
def download_sample_result(userkey_filename):
    user_key, filename = userkey_filename.split('___')
    user_path = os.path.join(PROJECT_DIR, 'sample/' + user_key)
    download_path = os.path.join(user_path, 'download')
    return send_from_directory(download_path, filename)

# already checked in HTML
# def allowed_file(filename, allowed_extensions):
#     return '.' in filename and \
#            filename.rsplit('.', 1)[1].lower() in allowed_extensions

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0')
